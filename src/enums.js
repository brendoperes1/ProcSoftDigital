export const sorte_reves = [
    { value: 1, title: "Sorte", label: "Seu cliente ficou satisfeito com o andamento do projeto. Posicione seu peão em uma atividade qualquer no tabuleiro, essa atividade poderá ser adicionada ao seu processo sem custo!", valor: "A+"},
    { value: 2, title: "Sorte", label: "Parabéns! Sua empresa acredita que esse projeto pode ser avaliado no MR-MPS.BR (Nível G), e os clientes ficaram felizes, e resolveram pagar um bônus. Receba R$150,00.", valor: "150"},
    { value: 3, title: "Sorte", label: "Os desenvolvedores estão conseguindo rastrear e corrigir todos os erros a tempo. Receba um bônus de R$100,00.", valor: "100"},
    { value: 4, title: "Sorte", label: "Apesar do cronograma apertado, o gerente de seu projeto está conseguindo lidar com tudo a tempo. As entregas estão no prazo. Posicione seu peão em uma atividade qualquer no tabuleiro, essa atividade poderá ser adicionada ao seu processo sem custo!", valor: "A+"},
    { value: 5, title: "Sorte", label: "Foi verificado que sua empresa está com todos seus softwares legalizados, e acabou de se tornar parceiro Ouro de uma fabricante de softwares. Ganhe um bônus de R$150,00.", valor: "150"},
    { value: 6, title: "Sorte", label: "O controle de versão do seu software e seus repositório encontram-se atualizados e com backup em dia. Ganhe um bônus de R$50,00.", valor: "50"},
    { value: 7, title: "Sorte", label: "O auditor de qualidade ficou impressionado, pois, no checklist elaborado por ele, suas atividades foram verificadas como conformes. Posicione seu pião em uma atividade qualquer no tabuleiro, essa atividade poderá ser adicionada ao seu processo sem custo!", valor: "A+"},
    { value: 8, title: "Sorte", label: "Com este projeto sua empresa está ganhando mais visibilidade e sendo requisitada por outros clientes. Ganhe um bônus de R$50,00", valor: "50"},
    { value: 9, title: "Sorte", label: "As ações de sua empresa subiram na Bolsa de Valores. Ganhe um bônus de R$100,00.", valor: "100"},
    { value: 10, title: "Sorte", label: "Vocês receberam um adiantamento pelo bom trabalho! Ganhe um bônus de R$100,00.", valor: "100"},
    { value: 11, title: "Revés", label: "Um auditor de qualidade externo viu que seu processo não está de acordo com as normas propostas. Pague uma multa de R$ 100,00", valor: "-100"},
    { value: 12, title: "Revés", label: "Seus templates estão fora do padrão, você terá de padronizá-los! Pague R$50,00.", valor: "-50"},
    { value: 13, title: "Revés", label: "O gerente da equipe não planejou o projeto direito e não fez as entregas no prazo. Pague uma multa de R$200,00.", valor: "-200"},
    { value: 14, title: "Revés", label: "O estagiário da equipe anda muito desleixado, as tarefas não foram cumpridas no prazo. Pague R$50,00.", valor: "-50"},
    { value: 15, title: "Revés", label: "Houve uma queda de energia e seus arquivos não foram salvos a tempo. Devolva uma atividade.", valor: "-A"},
    { value: 16, title: "Revés", label: "Descobriram a utilização de software pirata em sua empresa, você terá de se adequar. Pague R$250,00.", valor: "-250"},
    { value: 17, title: "Revés", label: "O desenvolvedor deixou passar diversos erros no sistema sem corrigi-los. Seu cliente ficou insatisfeito. Pague R$150,00.", valor: "-150"},
    { value: 18, title: "Revés", label: "A baseline do seu projeto não foi atualizada com as novas modificações, com isso foi entregue uma versão errada do sistema. Devolva uma atividade.", valor: "-A"}, //-A perde uma atividade
    { value: 19, title: "Revés", label: "As não conformidades encontradas nos casos de uso pela aplicação do checklist de verificação irão tomar muito tempo para serem corrigidas. Pague R$250,00.", valor: "-250"},
    { value: 20, title: "Revés", label: "O projeto está atrasado e o gerente da equipe decidiu chamar mais desenvolvedores. Possivelmente o projeto irá atrasar ainda mais. Devolva uma atividade", valor: "-A"},
];

export const atividades = [
    { value: 2, label: "Revisar o Escopo do Projeto e definir com cliente as instruções de cada entrega", valor: "100"},
    { value: 3, label: "Corrigir os defeitos encontrados nos testes de software", valor: "100"},
    { value: 4, label: "Definir as tarefas para os membros da equipe de acordo com seus papéis", valor: "100"},
    { value: 5, label: "Formalizar a completude do projeto e realizar entrega de acordo com o Plano do Projeto", valor: "100"},
    { value: 6, label: "Corrigir os defeitos encontrados até que o sucesso dos testes unitários seja alcançado", valor: "100"},
    { value: 7, label: "Realizar testes de software usando Casos e Procedimentos de testes para integração e produção do software e documentar os resultados no Test Report", valor: "100"},
    { value: 8, label: "Definir a composição da equipe, definindo papéis e responsabilidades", valor: "100"},
    { value: 9, label: "Verificar e obter a aprovação do Design de Software. Os resultados serão documentados no documento de Verificação de resultados e se precisar de mudanças começar um pedido de mudanças", valor: "100"},
    { value: 10, label: "Analisar e Estimar Pedidos de Mudança", valor: "100"},
    { value: 11, label: "Conduzir Reuniões com Equipe e com o Cliente", valor: "100"},
    { value: 13, label: "Validar se a especificação de Requisitos satisfaz e atende as expectativas. Os resultados encontrados são documentados em validação de resultados", valor: "100"},
    { value: 14, label: "Identificar os Riscos do Projeto", valor: "100"},
    { value: 15, label: "Criar ou atualizar Casos de Teste e Procedimentos de testes para testes integrados baseados na Especificação de Requisitos e Design de Software", valor: "100"},
    { value: 16, label: "Entender o Design de software", valor: "100"},
    { value: 17, label: "Incorporar Casos e procedimentos de Testes, Test Report, Guia de Operação do produto e Documentação do Usuário de Software para as configurações de software como parte da baseline", valor: "100"},
    { value: 18, label: "Aprovar plano do projeto com os interessados", valor: "100"},
    { value: 19, label: "Criar o documento de Manutenção ou atualizar o existente", valor: "100"},
    { value: 20, label: "Montar/atualizar o ambiente de implementação", valor: "100"},
    { value: 21, label: "Fazer backup de acordo com a Estratégia de Controle de Versão", valor: "100"},
    { value: 22, label: "Calcular o custo/esforço do Projeto", valor: "100"},
    { value: 35, label: "Incorporar o documento de especificação de requisitos e o manual do usuário na configuração do software na baseline", valor: "100"},
    { value: 36, label: "Definir o cronograma estimado de cada tarefa do Projeto", valor: "100"},
    { value: 37, label: "Documentar ou atualizar as Especificações de Requisitos.", valor: "100"},
    { value: 38, label: "Documentar o guia de operação do Produto ou atualizar o existente", valor: "100"},
    { value: 39, label: "Planejar o uso de recursos materiais e de hardware e de software e a estratégia de documentação e versionamento", valor: "100"},
    { value: 40, label: "Documentar a versão incial do Manual do usuário ou atualizar", valor: "100"},
    { value: 41, label: "Integrar o software usando componentes de software e atualizar Casos e Procedimentos de testes para integração quando necessário", valor: "100"},
    { value: 42, label: "Avaliar o progresso do projeto de acordo com o plano do projeto, gerar relatório de progresso e tomar ações pertinentes para os problemas e riscos identificados", valor: "100"},
    { value: 43, label: "Identificar mudanças nos requisitos e/ou no Plano de Projeto para analisar potenciais riscos e problemas para a conclusão do projeto", valor: "100"},
    { value: 44, label: "Realizar testes de regressão até o critério de saída ser atingido", valor: "100"},
    { value: 24, label: "Colocar casos de testes e procedimentos de teste no Repositório do Projeto.", valor: "100"},
    { value: 25, label: "Incorporar os componentes de software e a Rastreabilidade nas configurações de software como parte da baseline", valor: "100"},
    { value: 26, label: "Documentar a documentação do Usuário do Software ou atualizar a existente.", valor: "100"},
    { value: 27, label: "Criar ou atualizar os casos de teste de unidade e aplicá-los para ver se os componentes de Software implementam o que foi detalhado no design de Software", valor: "100"},
    { value: 28, label: "Incorporar o documento de Design de Software e o de Rastreabilidade as configurações de Software como parte da baseline.", valor: "100" },
    { value: 29, label: "Construir ou atualizar os componentes de Software baseado no detalhamento do Design de Software.", valor: "100"},
    { value: 30, label: "Documentar ou atualizar o Design de Software. Analisar a Especificação de requisitos para gerar a arquitetura do software. Gerar o documento de Rastreabilidade", valor: "100"},
    { value: 31, label: "Identificar as tarefas e Estabelecer o tempo de duração para cada tarefa", valor: "100"},
    { value: 32, label: "Verificar e obter a aprovação do documento de Especificação de Requisitos", valor: "100"},   
    { value: 33, label: "Atualizar o repositório do Projeto", valor: "100"},
];

export const perguntas = [
    { value: 1, label: "O que são teste de caixa preta?", resposta: "Teste de caixa-preta é um teste de software para verificar a saída dos dados usando entradas de vários tipos. Tais entradas não são escolhidas conforme a estrutura do programa."},
    { value: 2, label: "O que é um teste unitário?", resposta: "Também conhecida como teste unitário ou teste de módulo, é a fase em que se testam as menores unidades de software desenvolvidas (pequenas partes ou unidades do sistema).O universo alvo desse tipo de teste são as sub-rotinas, métodos, classes ou mesmo pequenos trechos de código. Assim, o objetivo é o de encontrar falhas de funcionamento dentro de uma pequena parte do sistema funcionando independentemente do todo"},
    { value: 3, label: "O que é o teste de integração?", resposta: "Teste de integração é a fase do teste de software em que módulos são combinados e testados em grupo. Ela sucede o teste de unidade, em que os módulos são testados individualmente, e antecede o teste de sistema, em que o sistema completo (integrado) é testado num ambiente que simula o ambiente de produção."},
    { value: 4, label: "Por que um modelo altamente acoplado é difícil de testar em unidade?", resposta: "O acoplamento é uma medida de interconexão entre módulos de um sistema, depende da complexidade da interface entre módulos. ele é medido entre dois módulos, definindo o grau de dependência entre eles. Quanto mais dependente for um do outro mais difícil será testar em unidade."},
    { value: 5, label: "O que é o KanBan?", resposta: "Kanban é um termo de origem japonesa e significa literalmente “cartão” ou “sinalização”. É um conceito relacionado com a utilização de cartões (post-it e outros) para indicar o andamento dos fluxos de produção em empresas de fabricação em série. Nesses cartões são colocadas indicações sobre uma determinada tarefa, por exemplo, “para executar”, “em andamento” ou “finalizado”. Atualmente, o Kanban é muitas vezes usado em conjunto com o Scrum, porque são duas metodologias usadas no desenvolvimento ágil de software"},
    { value: 6, label: "Cite 2 características do modelo de ciclo de vida cascata.", resposta: "Torna o processo de desenvolvimento estruturado; Tem uma ordem sequencial de fases; Cada fase cai em cascata na próxima e cada fase deve estar terminada antes do início da seguinte; Todas as atividades identificadas nas fases do modelo são fundamentais e estão na ordem certa"},
    { value: 7, label: "Cite algumas razões para as frequentes mudanças de requisito em um projeto.", resposta: "A complexidade dos sistemas impõe mudanças à medida que se adquire maior conhecimento sobre os mesmos, • Requisitos errados ou mal definidos precisam ser corrigidos/ajustados ao longo do processo de desenvolvimento, • Mudanças no ambiente: regras de negócios, leis, políticas internas, • Desenvolvedores querem adicionar funcionalidades mais avançadas de modo a oferecer vantangem • Tecnologia muda, • Clientes mudam de idéia."},
    { value: 8, label: "O que é uma solução pontual na XP?", resposta: "É a criação imediata de um protótipo operacional quando um problema de projeto é encontrado. O protótipo é testado e avaliado"},
    { value: 9, label: "É possível ser ágil e ainda sim manter o foco em qualidade? Por quê?.", resposta: "Sim. Porque no desenvolvimento ágil na engenharia de software é necessário definir processos que sejam manipuláveis, adaptáveis, sem excessos. Ainda mais utilizando se de uma filosofia que tem quatro elementos chaves: a importância das equipes se auto-organizarem, que tenham controle sobre o trabalho por ela realizado, sobre a comunicação e sobre a colaboração entre os membros da equipe e entre os desenvolvedores e seus clientes; o reconhecimento de que as mudanças representam oportunidades e ênfase na entrega rápida do software para satisfazer o cliente."},
    { value: 10, label: "Em que consiste um teste bem sucedido?", resposta: "É aquele que consegue capturar muitos defeitos antes do usuário final"},
    { value: 11, label: "Por que o feedback é importante em uma equipe de sotware?", resposta: "Porque estabelece os mecanismos de responsabilidades(revisões técnicas por exemplo) para as equipes, e definem uma série de abordagens para correções quando um membro falhar em suas atribuições pois assim se estabelece técnicas baseadas nas equipes voltadas para realimentação(o feedback em si) e resolução de problemas"},
    { value: 12, label: "O que é o modelo de análise?", resposta: "O modelo de análise preenche a lacuna entre uma descrição sistêmica que descreve o sistema como um todo ou a funcionalidade de negócio que é atingida aplicando-se software, hardware, dados, pessoal e outros elementos de sistema e um projeto de software que descreve a arquitetura, a interface do usuário e a estrutura em termos de componentes de software"},
    { value: 13, label: "O que são modelos de maturidade de software? Cite 2.", resposta: "Os modelos de maturidade são um metamodelo de processo. Eles surgiram para avaliar a qualidade dos processos de software aplicados em uma organização (empresa ou instituição). CMMI e MPS-BR"},
    { value: 14, label: "O que são fluxos de exceções nos casos de uso?", resposta: "Descrevem os procedimentos que devem ser adotados nos casos de erros durante os fluxos principal e alternativos."},
    { value: 15, label: "É uma boa prática codificar logo depois de um modelo de análise ter sido criado?", resposta: "Não. Falta modelo de projeto (que indica a solução tecnológica)."},
    { value: 16, label: "Qual o propósito da análise dedomínio?", resposta: "É a identificação, a análise e a especificação de requisitos comuns de um campo de aplicação específico, tipicamente para reutilização em vários projetos dentro deste campo de aplicação"},
    { value: 17, label: "Quais os tipos de mudanças (manutenções) possíveis durante a evolução do software?", resposta: "Perfectiva, Corretiva, Adaptativa, Preventiva"},
    { value: 18, label: "O que é a matriz de rastreabilidade?", resposta: "Segundo o Guia PMBOK®, a matriz de rastreabilidade dos requisitos liga os requisitos às suas origens e os rastreia durante todo o ciclo de vida do projeto. Seu uso ajuda a garantir que cada requisito adiciona valor de negócio através da sua ligação aos objetivos de negócio e aos objetivos do projeto, além de fornecer um meio de rastreamento do início ao fim do ciclo de vida do projeto, ajudando a garantir que os requisitos aprovados na documentação sejam entregues no final do projeto. Finalmente, fornece uma estrutura de gerenciamento das mudanças do escopo do produto."},
    { value: 19, label: "O que torna o projeto de software diferente da codificação?", resposta: "o Projeto de Software, o qual traduz, num conjunto de representações gráficas, tabulares ou textuais, os requisitos do software definidos na fase anterior; estas representações (diversas técnicas de representação podem ser adotadas em um mesmo projeto) permitirão definir, com um alto grau de abstração, aspectos do software como a arquitetura, os dados, algoritmos e características da interface; • a Codificação, onde as representações realizadas na etapa de projeto serão mapeadas em uma ou em várias linguagens de programação, a qual será caracterizada por um conjunto de instruções executáveis no computador; nesta etapa, considera-se também a geração de código de implementação, aquele obtido a partir do uso de ferramentas (compiladores, etc...) e que será executado pelo hardware do sistema"},
    { value: 20, label: "Como avaliar a qualidade de um projeto de software?", resposta: "Uma equipe de Garantia da Qualidade elabora um planejamento, supervisão, registros, e relatos de garantias de qualidade, através disso a equipe responsável pelo projeto de software faz o acompanhamento através de checklists de apoio para verificar se tudo está conforme. Características como: Funcionalidade, Confiabilidade, Usabilidade, Eficiência, Manutenibilidade, Portabilidade, Efetividade, Segurança, Produtividade e Satisfação"},
    { value: 21, label: "O que é um projeto de software?", resposta: "De acordo com Pressman, Projeto é a representação significativa de alguma coisa que será construída. Em engenharia de software, o Projeto de Software é a fase de desenvolvimento, na qual são feitos modelos com todas as entidades que serão construídas posteriormente a partir dos requisitos do sistema. O projeto de software foca em 4 áreas, como: dados, arquitetura, interface e componentes. Para garantir que um projeto está sendo feito com qualidade é necessário avaliar continuamente pontos referentes a corretude, completude, clareza e consistência com os requisitos do sistema"},
    { value: 22, label: "Por que o controle de versão é útil ao projeto? ", resposta: "Um sistema de controle de versão (ou versionamento), na função prática da Ciência da Computação e da Engenharia de Software, é um software com a finalidade de gerenciar diferentes versões no desenvolvimento de um documento qualquer. Esses sistemas são comumente utilizados no desenvolvimento de software para controlar as diferentes versões — histórico e desenvolvimento — dos códigosfontes e também da documentação."},
    { value: 23, label: "Por que a documentação é importante no projeto?", resposta: "Porque a documentação é usada para propósitos de futuras manutenções e aprimoramentos, pois auxilia na redução de horas preciosas na correção de problemas ao indicar bug’s e pontos vulneráveis no sistema e suas correções. Além disso s houver mudanças na equipe a documentação poderá auxiliar aos novos membros como está a situação do software."},
    { value: 24, label: "Cite algumas técnicas/práticas da engenharia de software para lidar com mudanças no software.", resposta: "Compreensão de programa, Análise de impacto da mudança, Análise da Propagação da mudança, Refatoramento, Testes de regressão."},
    { value: 25, label: "O que são riscos de um projeto?", resposta: "São os que ameaçam o plano do projeto. Se os riscos do projeto se tornarem reais, é possível que o cronograma fique atrasado e os custos aumentam. Os riscos de projeto identificam problemas potenciais de orçamento, cronograma, pessoal, recursos, clientes e requisitos e seu impacto sobre o projeto de software"},
    { value: 26, label: "O que são pontos de função?", resposta: "é uma unidade de medida de software para estimar o tamanho de um sistema de informação baseando-se na funcionalidade percebida pelo usuário do sistema, independentemente da tecnologia usada para implementálo. Pontos de Função medem o tamanho funcional do software."},
    { value: 27, label: "Por que não se deve aguardar até que todos os testes terminem para descobrir e corrigir todos os erros de software?", resposta: "Quanto mais cedo se acha um erro, mais barata sua correção. Redução do tempo de identificação e correção dos defeitos. Documentação dos limites do sistema. Evita que falhas detectadas pelos testes se manifestem em versões futuras do programa."},
    { value: 28, label: "O que são testes de caixa branca?", resposta: "O analista tem acesso ao código fonte, conhece a estrutura interna do produto sendo analisado e possibilita que sejam escolhidas partes específicas de um componente para serem avaliadas. Esse tipo de teste, também conhecido como teste estrutural, é projetado em função da estrutura do componente e permite uma averiguação mais precisa do comportamento dessa estrutura. Perceba que o acesso ao código facilita o isolamento de uma função ou ação, o que ajuda na análise comportamental das mesmas."},
    { value: 29, label: "O que são teste de caixa preta?", resposta: "Teste de caixa-preta é um teste de software para verificar a saída dos dados usando entradas de vários tipos. Tais entradas não são escolhidas conforme a estrutura do programa"},
    { value: 30, label: "O que é um teste unitário?", resposta: "Também conhecida como teste unitário ou teste de módulo, é a fase em que se testam as menores unidades de software desenvolvidas (pequenas partes ou unidades do sistema).O universo alvo desse tipo de teste são as subrotinas, métodos, classes ou mesmo pequenos trechos de código. Assim, o objetivo é o de encontrar falhas de funcionamento dentro de uma pequena parte do sistema funcionando independentemente do todo."},
    { value: 31, label: "Um programa pode ser correto e ainda assim não apresentar boa qualidade? Explique.", resposta: "Sim. O fato de ele estar correto apenas indica que suas funcionalidades estão operacionais. Mas apesar disto, nada garante que ele foi feito com boas práticas de Engenharia de Software. Sem testes, documentação ou não atendendo todos os requisitos dos clientes."},
    { value: 32, label: "O que é o teste de integração? ", resposta: "Teste de integração é a fase do teste de software em que módulos são combinados e testados em grupo. Ela sucede o teste de unidade, em que os módulos são testados individualmente, e antecede o teste de sistema, em que o sistema completo (integrado) é testado num ambiente que simula o ambiente de produção."},
    { value: 33, label: "Qual a diferença entre verificação e validação?", resposta: "Verificação - Avaliar se o que foi planejado realmente foi realizado. Ou seja, se os requisitos e funcionalidades documentados foram implementados, além disso, a verificação também pode ser realizada para especificação de sistemas, para avaliar se os requisitos estão sendo documentados como deveriam e ainda prever falhas ou inconsistências entre requisitos. Validação - Avaliar se o que foi entregue atende as expectativas do cliente. Ou seja, se os requisitos estão sendo implementados para atender a regra de negócio do cliente. A validação final do sistema é realizada pelo próprio cliente. "},
    { value: 34, label: "Por que um modelo altamente acoplado é difícil de testar em unidade?", resposta: "O acoplamento é uma medida de interconexão entre módulos de um sistema, depende da complexidade da interface entre módulos. ele é medido entre dois módulos, definindo o grau de dependência entre eles. Quanto mais dependente for um do outro mais difícil será testar em unidade."},
    { value: 35, label: "Alguns fatores que afetam a precificação de um software são:", resposta: "Volatilidade dos requisitos, Oportunidade de mercado, Saúde financeira de quem desenvolve o software, incertezas na estimativas de custo, termos contratuais."},
    { value: 36, label: "Qual destas afirmações não é uma vantagem sobre o modelo de ciclo de vida incremental?", resposta: "Entregas parciais facilitam a identificação e correção de erros entre os componentes do software; Facilita a manutenção dos “módulos”; O fim do processo pode ser previamente definido"},
    { value: 37, label: "Cite 2 características de modelo de ciclo de vida em espiral.", resposta: "Por ser incremental podem ser adicionadas novas funcionalidades em cada nova versão; Praticamente não existe distinção entre desenvolvimento e pós-entrega; Maior controle sobre os riscos do projeto, tornando o processo de construção de um produto complexo mais seguro; Modelo destina-se exclusivamente a desenvolvimento de software interno; A abordagem deste modelo exige grande experiência na avaliação dos riscos; O modelo espiral é mais adequado para sistemas complexos e que exijam um alto nível de interações com os usuários desse sistema. "},
    { value: 38, label: "Qual destas afirmações não é uma vantagem sobre o modelo de ciclo de vida iterativo?", resposta: "A cada ciclo do sistema os usuários e cliente poderão utilizar o sistema diretamente, eles são os testadores no processo de desenvolvimento e eles estarão interagindo com o sistema durante o desenvolvimento; Alterações nos requisitos podem ser rapidamente incorporadas no processo de desenvolvimento; Durante o processo de desenvolvimento não há a necessidade de adaptar e refinar o sistema."},
    { value: 39, label: "O plano de um projeto de software pode conter:", resposta: "Organização do projeto, análise de riscos, requisitos de hardware e software, divisão das tarefas, cronograma, mecanismos de monitoramento e relatórios."},
    { value: 40, label: "O que é uma baseline?", resposta: "É um conceito de gerenciamento de configuração de software que nos ajuda a controlar as mudanças, sem impedir seriamente as mudanças justificáveis. No contexto de engenharia de software, definimos uma baseline como um marco de referência no desenvolvimento de um software, que é caracterizado pela entrega de um ou mais itens de configuração e pela aprovação desses, obtida por meio de uma revisão técnica formal. Ao aprovarmos uma determinada configuração, seja de hardware ou de software, estaremos criando uma baseline. "},
    { value: 41, label: "Como é feita uma Revisão por Pares?", resposta: "A verificação do artefato é realizada por outros desenvolvedores, que não sabem quem foi o autor do artefato, com isso evita-se que o rigor crítico seja baixo e evita atritos"},
    { value: 42, label: "O que são requisitos funcionais?", resposta: "Um requisito funcional define uma função de um software ou parte dele. Ele é o conjunto de entradas, seu comportamento e sua saída, ou seja, envolve cálculos, lógicas de trabalho, manipulação e processamento de dados, entre outros."},
    { value: 43, label: "O que são requisitos não funcionais? ", resposta: "Requisitos não funcionais são relacionados ao uso da aplicação em termos de desempenho, usabilidade, confiabilidade, disponibilidade, segurança e tecnologias envolvidas. Muitas vezes, os requisitos não funcionais acabam gerando restrições aos funcionais."},
    { value: 44, label: "Acrescentar pessoas a um projeto em atraso necessariamente irá retardá-lo. Verdadeiro ou Falso?", resposta: "Verdadeiro. O que ocorre é que, quando novas pessoas entram, as que já estavam terão de gastar tempo situando os recém-chegados, reduzindo, consequentemente, o tempo destinado ao desenvolvimento produtivo. Podem-se adicionar pessoas, mas somente de forma planejada e bem coordenada."},
    { value: 45, label: "Como funciona um cronograma de projeto se software?", resposta: "É uma atividade que distribui o esforço estimado por toda a duração planejada do projeto alocando esse esforço para tarefas específicas de engenharia de software. Conforme o projeto caminha, cada item é refinado em um cronograma detalhado. Nesse momento, ações e tarefas de software específicas são identificadas e dispostas em um cronograma. "},
    { value: 46, label: "Para que serve o diagrama de Gantt?", resposta: "O Gráfico de Gantt, ou Diagrama de Gantt, é uma ferramenta que permite a visualização do progresso de projetos. É, basicamente, uma ferramenta de acompanhamento, bastante visual, cujo objetivo é deixar a informação o mais transparente possível. A função do Gráfico de Gantt é de uma forma genérica, permitir o acompanhamento da realização de tarefas e atividades que compõem um projeto de objetivo maior. Dessa forma, a utilização da ferramenta permite que todos os interessados possam verificar o andamento das atividades. "},
    { value: 47, label: "O que é o caminho crítico de um projeto?", resposta: "O caminho crítico é a sequência de atividades que devem ser concluídas nas datas programadas para que o projeto possa ser concluído dentro do prazo final. Se o prazo final for excedido, é porque no mínimo uma das atividades do caminho crítico não foi concluída na data programada."},
    { value: 48, label: "O que são riscos conhecidos e riscos previsíveis?", resposta: "riscos conhecidos - são aqueles que podem ser descobertos após uma cuidadosa avaliação do plano do projeto, do ambiente comercial e técnico no qual o projeto está sendo desenvolvido e de outras fontes de informação confiáveis.(por exemplo, data de entrega irreal, falta de documentação dos requisitos ou do escopo do software, ambiente de desenvolvimento ruim). riscos previsíveis - são oriundos da experiência d projetos anteriores(por exemplo, rotatividade do pessoal, comunicação deficiente com o cliente, diluição do esforço da equipe conforme as solicitações de manutenção vão sendo atendidas)."},
    { value: 49, label: "O que é mitigação de riscos?", resposta: "Na Gerência de Projetos de Software, o plano de mitigação inclui procedimentos para amenizar ou eliminar a ocorrência dos riscos impactantes no projeto."},
    { value: 50, label: "O que é o CMMI?", resposta: "O CMMI foi baseado nas melhores práticas para desenvolvimento e manutenção de produtos. Há uma ênfase tanto em engenharia de sistemas quanto em engenharia de software, e há uma integração necessária para o desenvolvimento e a manutenção."},
    { value: 51, label: "O que é o MPS-BR?", resposta: "O MPS.BR ou Melhoria de Processos do Software Brasileiro é simultaneamente um movimento para a melhoria da qualidade (Programa MPS.BR) e um modelo de qualidade de processo (Modelo MPS). Voltado para a realidade do mercado de pequenas e médias empresas de desenvolvimento de software no Brasil, ele é baseado nas normas ISO/IEC 12207 e ISO/IEC 15504 e compatível com o CMMI. Uma das principais vantagens do modelo é seu custo reduzido de certificação em relação as normas estrangeiras, sendo ideal para micro, pequenas e médias empresas que são a grande maioria no Brasil."},
    { value: 52, label: "O que é qualidade de processo de software?", resposta: "A qualidade no processo procura identificar a má qualidade o quanto antes, o que é feito pelo controle da conformidade à especificação, e corrigir o problema, evitando que continue o desperdício até o fim. Para garantir a conformidade à especificação ao longo do processo, é necessário especificar como executar atividades e seus resultados e controlar sistematicamente todo esse processo que irá atingir a qualidade. É preciso ainda identificar e eliminar as fontes da má qualidade, mediante alterações apropriadas no processo, ou seja, nas especificações de suas atividades."},
    { value: 53, label: "O que é qualidade de produto de software?", resposta: "é a rigorosa definição das características relevantes do produto, estabelecendo os atributos e as variáveis que deve conter cuja dimensão deve ser assegurada. A especificação é o documento que formalizará essas definições."},
    { value: 54, label: "Verdadeiro ou Falso: O modelo de custo COCOMO II é um modelo de custo algoritmo maduro que considera o projeto, o produto, hardware e atributos pessoais quando formulando a estimativa de custo.", resposta: "Verdadeiro."},
    { value: 55, label: "O que é gerência de configuração?", resposta: "É a área da Engenharia de Software responsável por fornecer apoio para o desenvolvimento do software. Tem o propósito de estabelecer e manter integridade de todos os produtos do trabalho de um processo ou projeto e disponibilizá-lo a todos os envolvidos."},
    { value: 56, label: "Nas métricas orientadas a objetos, quais as 6 grandezas que costumam a ser medidas?", resposta: "Métodos ponderados por classe, Profundidade da árvore de herança, Número de subclasses, Acoplamento entre objetos, Respostas para a classe, Falta de coesão nos métodos."},
    { value: 57, label: "Qual a diferença entre o SCRUM e o XP?", resposta: "O foco do SRUM se concentra mais na parte gerencial, por sua vez o XP foca mais nas áreas de engenharia e programação."},
    { value: 58, label: "Verdadeiro ou Falso: O padrão de projeto Observer é comum de ser adotado no padrão arquitetural Model View Controller (MVC).", resposta: "Verdadeiro."},
    { value: 59, label: "O que é processo de software?", resposta: "No contexto da engenharia de software, é definido como uma metodologia para as atividades, ações e tarefas necessárias para desenvolver um software de alta qualidade."},
    { value: 60, label: "Verdadeiro ou Falso: A engenharia de software nos fará criar documentação volumosa e desnecessária e invariavelmente irá nos retardar?", resposta: "A engenharia de software não trata da criação de documentos, trata da criação de um produto de qualidade. Melhor qualidade conduz à redução do retrabalho, e menos retrabalho resulta em maior rapidez na entrega. A necessidade de documentação deve ser adaptada a cada contexto de desenvolvimento e a cada empresa."}
];

export const papeis = [
    { value: "senior", label: "Analista Senior", valor: "300"},
    { value: "gerente", label: "Gerente", valor: "300"},
    { value: "dev_sen", label: "Desenvolvedor Senior", valor: "300"},
    { value: "dev_jun", label: "Desenvolvedor Júnior", valor: "100"},
    { value: "ana_jun", label: "Analista Júnior", valor: "100"},
    { value: "tes_sen", label: "Testador Senior", valor: "300"},
    { value: "tes_jun", label: "Testador Júnior", valor: "100"}
];

export const papeis2 = [
    { value: "senior", label: "Analista Senior", valor: "300"},
    { value: "gerente", label: "Gerente", valor: "300"},
    { value: "dev_sen", label: "Desenvolvedor Senior", valor: "300"},
    { value: "dev_jun", label: "Desenvolvedor Júnior", valor: "100"},
    { value: "ana_jun", label: "Analista Júnior", valor: "100"},
    { value: "tes_sen", label: "Testador Senior", valor: "300"},
    { value: "tes_jun", label: "Testador Júnior", valor: "100"}
];

export const papeis3 = [
    { value: "senior", label: "Analista Senior", valor: "300"},
    { value: "gerente", label: "Gerente", valor: "300"},
    { value: "dev_sen", label: "Desenvolvedor Senior", valor: "300"},
    { value: "dev_jun", label: "Desenvolvedor Júnior", valor: "100"},
    { value: "ana_jun", label: "Analista Júnior", valor: "100"},
    { value: "tes_sen", label: "Testador Senior", valor: "300"},
    { value: "tes_jun", label: "Testador Júnior", valor: "100"}
];

export const ferramentas = [
    { value:1, type: "Sênior", papel: "Gerenciamento", label: "PROJECT SERVER", valor: "200"},
    { value:2, type: "Júnior", papel: "Gerenciamento", label: "PRIMAVERA", valor: "150"},
    { value:3, type: "Júnior", papel: "Gerenciamento", label: "REDMINE", valor: "150"},
    { value:4, type: "Uso Geral", papel: "Gerenciamento", label: "PROJECT BUILDER", valor: "100"},
    { value:5, type: "Sênior", papel: "Desenvolvimento", label: "ECLIPSE", valor: "200"},
    { value:6, type: "Júnior", papel: "Desenvolvimento", label: "VISUAL STUDIO", valor: "150"},
    { value:7, type: "Júnior", papel: "Desenvolvimento", label: "CODEBLOCKS", valor: "150"},
    { value:8, type: "Uso Geral", papel: "Desenvolvimento", label: "DEVC++", valor: "100"},
    { value:9, type: "Sênior", papel: "Modelagem/Análise", label: "ASTAH", valor: "200"},
    { value:10, type: "Júnior", papel: "Modelagem/Análise", label: "BIZAGI", valor: "150"},
    { value:11, type: "Júnior", papel: "Modelagem/Análise", label: "ENTERRPRISE ARCHITECT", valor: "150"},
    { value:12, type: "Uso Geral", papel: "Modelagem/Análise", label: "ERWIN", valor: "100"},
    { value:13, type: "Sênior", papel: "Controle de Versão", label: "SVN", valor: "200"},
    { value:14, type: "Júnior", papel: "Controle de Versão", label: "GIT", valor: "150"},
    { value:15, type: "Júnior", papel: "Controle de Versão", label: "STARTEAM", valor: "150"},
    { value:16, type: "Uso Geral", papel: "Controle de Versão", label: "TFS", valor: "100"},
    { value:17, type: "Sênior", papel: "Testes/Defeitos", label: "JUNIT", valor: "200"},
    { value:18, type: "Júnior", papel: "Testes/Defeitos", label: "BUGTRACKER", valor: "150"},
    { value:19, type: "Júnior", papel: "Testes/Defeitos", label: "MANTIS", valor: "150"},
    { value:20, type: "Uso Geral", papel: "Testes/Defeitos", label: "SELENIUM", valor: "100"}
];
export const ferramentas2 = [
    { value:1, type: "Sênior", papel: "Gerenciamento", label: "PROJECT SERVER", valor: "200"},
    { value:2, type: "Júnior", papel: "Gerenciamento", label: "PRIMAVERA", valor: "150"},
    { value:3, type: "Júnior", papel: "Gerenciamento", label: "REDMINE", valor: "150"},
    { value:4, type: "Uso Geral", papel: "Gerenciamento", label: "PROJECT BUILDER", valor: "100"},
    { value:5, type: "Sênior", papel: "Desenvolvimento", label: "ECLIPSE", valor: "200"},
    { value:6, type: "Júnior", papel: "Desenvolvimento", label: "VISUAL STUDIO", valor: "150"},
    { value:7, type: "Júnior", papel: "Desenvolvimento", label: "CODEBLOCKS", valor: "150"},
    { value:8, type: "Uso Geral", papel: "Desenvolvimento", label: "DEVC++", valor: "100"},
    { value:9, type: "Sênior", papel: "Modelagem/Análise", label: "ASTAH", valor: "200"},
    { value:10, type: "Júnior", papel: "Modelagem/Análise", label: "BIZAGI", valor: "150"},
    { value:11, type: "Júnior", papel: "Modelagem/Análise", label: "ENTERRPRISE ARCHITECT", valor: "150"},
    { value:12, type: "Uso Geral", papel: "Modelagem/Análise", label: "ERWIN", valor: "100"},
    { value:13, type: "Sênior", papel: "Controle de Versão", label: "SVN", valor: "200"},
    { value:14, type: "Júnior", papel: "Controle de Versão", label: "GIT", valor: "150"},
    { value:15, type: "Júnior", papel: "Controle de Versão", label: "STARTEAM", valor: "150"},
    { value:16, type: "Uso Geral", papel: "Controle de Versão", label: "TFS", valor: "100"},
    { value:17, type: "Sênior", papel: "Testes/Defeitos", label: "JUNIT", valor: "200"},
    { value:18, type: "Júnior", papel: "Testes/Defeitos", label: "BUGTRACKER", valor: "150"},
    { value:19, type: "Júnior", papel: "Testes/Defeitos", label: "MANTIS", valor: "150"},
    { value:20, type: "Uso Geral", papel: "Testes/Defeitos", label: "SELENIUM", valor: "100"}
];
export const ferramentas3 = [
    { value:1, type: "Sênior", papel: "Gerenciamento", label: "PROJECT SERVER", valor: "200"},
    { value:2, type: "Júnior", papel: "Gerenciamento", label: "PRIMAVERA", valor: "150"},
    { value:3, type: "Júnior", papel: "Gerenciamento", label: "REDMINE", valor: "150"},
    { value:4, type: "Uso Geral", papel: "Gerenciamento", label: "PROJECT BUILDER", valor: "100"},
    { value:5, type: "Sênior", papel: "Desenvolvimento", label: "ECLIPSE", valor: "200"},
    { value:6, type: "Júnior", papel: "Desenvolvimento", label: "VISUAL STUDIO", valor: "150"},
    { value:7, type: "Júnior", papel: "Desenvolvimento", label: "CODEBLOCKS", valor: "150"},
    { value:8, type: "Uso Geral", papel: "Desenvolvimento", label: "DEVC++", valor: "100"},
    { value:9, type: "Sênior", papel: "Modelagem/Análise", label: "ASTAH", valor: "200"},
    { value:10, type: "Júnior", papel: "Modelagem/Análise", label: "BIZAGI", valor: "150"},
    { value:11, type: "Júnior", papel: "Modelagem/Análise", label: "ENTERRPRISE ARCHITECT", valor: "150"},
    { value:12, type: "Uso Geral", papel: "Modelagem/Análise", label: "ERWIN", valor: "100"},
    { value:13, type: "Sênior", papel: "Controle de Versão", label: "SVN", valor: "200"},
    { value:14, type: "Júnior", papel: "Controle de Versão", label: "GIT", valor: "150"},
    { value:15, type: "Júnior", papel: "Controle de Versão", label: "STARTEAM", valor: "150"},
    { value:16, type: "Uso Geral", papel: "Controle de Versão", label: "TFS", valor: "100"},
    { value:17, type: "Sênior", papel: "Testes/Defeitos", label: "JUNIT", valor: "200"},
    { value:18, type: "Júnior", papel: "Testes/Defeitos", label: "BUGTRACKER", valor: "150"},
    { value:19, type: "Júnior", papel: "Testes/Defeitos", label: "MANTIS", valor: "150"},
    { value:20, type: "Uso Geral", papel: "Testes/Defeitos", label: "SELENIUM", valor: "100"}
];